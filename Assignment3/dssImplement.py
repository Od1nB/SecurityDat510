import hashlib
import random

message = "Do you want to 3ncrypt some strings? Alice"

"Both agree on public generator and a prime"
q = 10009
a = 337 #The generator has to be a primitive root of the prime q

print(f"Big prime: {q} and generator which is primitive root of q: {a}")

"Both choose a private key themselves and use this to generate a public key"

privAlice = 43
publicAlice = pow(a,privAlice,q)
privBob = 69 
publicBob = pow(a,privBob,q)

print(f"Alice chooses a private key, {privAlice} and generates a public key from this {publicAlice}")
print(f"Bob chooses a private key, {privBob} and generates a public key from this {publicBob}")

"Alice wants to send a message to Bob. She then makes a signature to send with the message."

"Alice starts with hashing her message"
hashedMessage = hashlib.sha256(message.encode())
hashNumbers = hashedMessage.hexdigest()
print(f"Alice uses a cryptograpic hash on her message to transform #{message}# to {hashNumbers}")

splitHash = []
while len(hashNumbers)>0:
        splitHash.append(int(hashNumbers[:3],16))
        hashNumbers = hashNumbers[3:]

print(f"She then splits the hashed number into three and three number, aka 3*4 bits 2^12 wich is less than q-1(10008) which is 2^14")
print(splitHash)

print("The next two functions is used for generating a K. K has to satisfy gcd(K,q-1) = 1")
"gcd function"
def gcd(a,b):
    if a > b: 
        small = b 
    else: 
        small = a 
    for i in range(1, small+1): 
        if((a % i == 0) and (b % i == 0)): 
            gcd = i     
    return gcd
#https://www.edureka.co/blog/gcd-in-python/

"Make function for generate a K"
def genereteK(qprime):
    number1 = random.randint(2,q-1)
    while(gcd(qprime-1,number1)!=1):
        number1 = random.randint(2,q-2)
    return number1

K = genereteK(q)
S1 = pow(a,K,q)
print(f"The generated K:{K}, is used to make the secret key along with her private key, S1: {S1}")

Kinv = pow(K,-1,(q-1))
S2 = ""
for x in range(len(splitHash)):
    sTemp = Kinv * (splitHash[x]-privAlice*S1)
    S2 += str("{:04}".format(int(sTemp % (q-1))))
    S2 += "-"
S2 = S2[:len(S2)-1]
print("S2 is generated by looping through the different m and with the S2 function on line 74 to make a piece of S2 and append it")
print("Each part is separated with the #-# and formated to leading zeros with 4 in length")
print(f"S2: {S2}")

print("The message and the signature keys is appended to a string that is sent over the internet with #//# as divider")
sentString = str(S1) +"//"+ str(S2) +"//" + message
print(f"S1,S2,message --> Sent string : {sentString}")

"Bob recives the string and checks"
S1,S2str, aliceMessage = sentString.split("//")
S1 = int(S1)
S2 = S2str.split("-")
print(f"Bob recieves the string and splits it on the operator #//# to receive S1, S2 and the message")
print(f"S1: {S1}, S2: {S2}") 
print(f"and the message: {aliceMessage}")

"Bob hashes the message he recived from Alice and creates V1"
bobHashed = hashlib.sha256(aliceMessage.encode())
bobNumbers = bobHashed.hexdigest()
splittedBobHash = []
while(len(bobNumbers)>0):
    splittedBobHash.append(int(bobNumbers[:3],16))
    bobNumbers = bobNumbers[3:]

V1 =""
for x in splittedBobHash:
    V1 += str(pow(a,x,q))
print(f"V1 made from the message received, which will be used to compare with V2 later. V1: {V1}")

"Bob making V2 for comparing"
V2 = ""
for s in S2:
    V2 += str((pow(publicAlice,S1))*(pow(S1,int(s))) % q)
print(f"V2 from the function given by elgamal on line 109 in the code: {V2}")

"Bob checks if these are identical to see if Alice sent the message"
check = False
if V1 == V2:
    check = True
print("Bob checks if V1 and V2 are identical, if so Alice sent the string")
print(f"Alice sent Bob the message: {check}")